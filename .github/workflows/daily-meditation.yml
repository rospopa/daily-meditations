name: Send Daily Meditation

on:
  schedule:
    - cron: '30 13 * * *'  # Run daily at 7:30 AM CST (13:30 UTC)
  workflow_dispatch:  # Allow manual triggering
    inputs:
      test_mode:
        description: 'Run in test mode (skips actual sending)'
        required: false
        default: 'false'


# Set environment variables that can be used across all jobs
env:
  PYTHONUNBUFFERED: 1  # Ensure Python output is shown in real-time
  DEBUG: "true"        # Enable debug output
  TEST_MODE: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.test_mode == 'true' || 'false' }}

jobs:
  send-meditation:
    runs-on: ubuntu-latest
    
    # Set permissions for the job
    permissions:
      contents: write  # Required for committing changes
      actions: write  # Required for workflow commands
      
    # Set timeout to 20 minutes (default is 6 hours, but we want to fail faster if stuck)
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Required for git operations
        token: ${{ secrets.GITHUB_TOKEN }}  # Use the built-in token
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install twilio requests pillow
    
    - name: Set up config
      id: config
      env:
        TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
        TWILIO_AUTH_TOKEN: ${{ secrets.TWILIO_AUTH_TOKEN }}
        TWILIO_PHONE_NUMBER: ${{ secrets.TWILIO_PHONE_NUMBER }}
        RECIPIENTS: ${{ secrets.RECIPIENTS }}
      run: |
        echo "Creating config file..."
        python scripts/setup_config.py
        
        # Verify config was created
        if [ ! -f "config.json" ]; then
          echo "::error::Failed to create config.json"
          exit 1
        fi
        
        # Print first 2 lines of config (without sensitive data)
        echo "Config created with the following recipients:"
        jq -r '.recipients | length' config.json | xargs -I {} echo "Number of recipients: {}"
    
    - name: Run daily meditation
      id: run-script
      continue-on-error: true  # Continue to next step even if this fails
      env:
        TEST_MODE: ${{ env.TEST_MODE }}
      run: |
        # Create debug directory with timestamp
        TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
        DEBUG_DIR="debug_logs/run_${TIMESTAMP}"
        mkdir -p "$DEBUG_DIR"
        
        # Run the script with debug output
        echo "Starting meditation script..."
        echo "TEST_MODE: $TEST_MODE"
        
        # Set test mode flag if needed
        TEST_FLAG=""
        if [ "$TEST_MODE" = "true" ]; then
            TEST_FLAG="--test"
            echo "Running in TEST MODE - no messages will be sent"
        fi
        
        # Run the script with unbuffered output and save to log
        python -u daily_meditation.py $TEST_FLAG 2>&1 | tee "$DEBUG_DIR/script_output.log"
        
        # Capture exit code
        SCRIPT_EXIT_CODE=${PIPESTATUS[0]}
        echo "Script exited with code: $SCRIPT_EXIT_CODE"
        
        # Save the exit code to be used in subsequent steps
        echo "SCRIPT_EXIT_CODE=$SCRIPT_EXIT_CODE" >> $GITHUB_ENV
        
        # Exit with the script's exit code
        exit $SCRIPT_EXIT_CODE
    
    - name: Upload debug artifacts
      if: always()  # Run this step even if previous steps failed
      uses: actions/upload-artifact@v4
      with:
        name: debug-artifacts
        path: |
          debug_logs/
          *.log
        retention-days: 7
        compression-level: 9
        
    - name: Parse and summarize logs
      if: always()
      run: |
        # Find the latest debug directory
        LATEST_RUN=$(ls -td debug_logs/run_* | head -1)
        
        if [ -z "$LATEST_RUN" ]; then
            echo "No debug directory found"
            exit 0
        fi
        
        echo "Analyzing logs from: $LATEST_RUN"
        
        # Create a summary file
        SUMMARY_FILE="debug_summary_$(date +%Y%m%d_%H%M%S).md"
        echo "# Debug Summary" > "$SUMMARY_FILE"
        echo "## Run Details" >> "$SUMMARY_FILE"
        echo "- **Run Directory:** $LATEST_RUN" >> "$SUMMARY_FILE"
        echo "- **Exit Code:** ${{ env.SCRIPT_EXIT_CODE }}" >> "$SUMMARY_FILE"
        
        # Add script output summary
        echo -e "\n## Script Output" >> "$SUMMARY_FILE"
        echo '```' >> "$SUMMARY_FILE"
        tail -n 50 "$LATEST_RUN/script_output.log" 2>/dev/null | head -n 1000 >> "$SUMMARY_FILE" || echo "No script output found" >> "$SUMMARY_FILE"
        echo '```' >> "$SUMMARY_FILE"
        
        # List all debug files
        echo -e "\n## Debug Files" >> "$SUMMARY_FILE"
        find "$LATEST_RUN" -type f -printf "- %P (%s bytes)\n" | sort >> "$SUMMARY_FILE"
        
        # Upload summary as build artifact
        echo "summary_file=$SUMMARY_FILE" >> $GITHUB_OUTPUT
        
    - name: Upload Debug Summary
      if: always() && steps.parse-logs.outputs.summary_file != ''
      uses: actions/upload-artifact@v4
      with:
        name: debug-summary
        path: ${{ steps.parse-logs.outputs.summary_file }}
        retention-days: 7
        
    - name: Commit and push changes
      if: always() && steps.run-script.outcome == 'success'  # Only commit if script ran successfully
      run: |
        echo "Setting up git..."
        git config --global user.name 'GitHub Actions'
        git config --global user.email 'actions@github.com'
        
        # Configure git to use the token
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
        
        # Check for changes to commit
        if git status --porcelain | grep -q 'config.json'; then
          echo "Committing changes to config.json..."
          git add config.json
          git commit -m "Update meditation history [skip ci]"
          
          # Push changes
          git push origin HEAD:${{ github.ref }}
          echo "Changes pushed successfully"
        else
          echo "No changes to commit"
        fi
    
    - name: Check for errors
      if: always() && steps.run-script.outcome != 'success'
      run: |
        echo "::error::Script execution failed. Check the debug artifacts for more information."
        exit 1
